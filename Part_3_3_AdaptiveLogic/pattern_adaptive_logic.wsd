@startuml pattern_adaptive_logic

skinparam allow_mixing true
skinparam BackgroundColor white
skinparam ComponentStyle rectangle

skinparam note {
    BackgroundColor FCFCFC
    BorderColor 444444
    FontColor 222222
    FontSize 16
}

skinparam object {
    BorderThickness 1
    RoundCorner 20
    StereotypeFontColor black
    FontStyle bold
    BackgroundColor white
    BorderColor black
    FontColor black

    FontSize 16
    AttributeFontSize 16

    BorderThickness 1
    RoundCorner 20

    BackgroundColor<<environment>> white
    BackgroundColor<<UserDefinedType>> CCCCCC
    BackgroundColor<<Function>> CCCCCC
    BackgroundColor<<FunctionBlock>> CCCCCC
}

skinparam InterfaceBorderColor Black
skinparam InterfaceBackgroundColor Black

skinparam Arrow {
    FontColor black
    Color black
    Thickness 2
    FontSize 16
}

object "UnionType" as unionType <<UserDefinedType>>{
    Selector: int
    State: StateInfo
    Real: AnaInfo
    DInt: DIntInfo
    Bool: BinInfo
    String: StringInfo
}

note as unionNote
Selector Encoding
0: undefined
1: State
2: Real
3: DInt
4: Bool
5: String
end note

unionNote .up. unionType
unionNote .[hidden]. unionType

note as sourceNote
Source Encoding
-1: constant value
0: undefined
1: Input
2: Logic
3: Output
end note


object "ArgumentType" as argType <<UserDefinedType>>{
    Source: int
    Index: int
    Const: UnionType
}

object "OutputType" as outType <<UserDefinedType>>{
    Source: int
    Index: int
    Const: UnionType
    Value: UnionType
}

sourceNote .down. argType
sourceNote .left. outType

object "FunctionType" as funcType <<UserDefinedType>>{
    Selector: int
    Arguments: ArgumentType[]
    Out: UnionType
    Ret: INT
}

note as functionNote
Selector Encoding
0: not used
10+x: Arithmetic Functions
30+x: Logic Functions
50+x: Comparator Functions
100+x: If-Then-Functions
200+x: Exception Functions
end note

functionNote .right. funcType
functionNote .[hidden]. funcType

object "AdaptiveLogic" as blockType <<FunctionBlock>>{
    Inputs : UnionType[]
    Logic : FunctionType[]
    Outputs: OutputType[]
}

blockType *-left- unionType : "Inputs"
blockType *-down- funcType : "Logic"
blockType *-right- outType : "Outputs"
funcType *-right- argType : "Arguments"
@enduml